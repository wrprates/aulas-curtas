---
title: "Limpeza de dados no R: `Janitor`"
author: "Wlademir Prates"
format:
  revealjs: 
    theme: default
    incremental: true
    self-contained: true
    transition: slide
---

## O que você encontra aqui? {background-color="#25325f"}

-   Aulas **curtas** e **objetivas**
-   Repositório público:
    -   <blockquote><https://github.com/wrprates/aulas-curtas></blockquote>

## Limpeza de dados no R

-   Antes de qualquer análise precisamos fazer a limpeza de dados.
-   O R possui vários `pacotes` para limpeza e transformação de dados.
-   Isso facilita muito todo o processo e garante a **consistência** e **confiabilidade** do estudo.

## Janitor 

Desenvolvido tendo em mente os usuários de R do `iniciante` ao `intermediário`, é otimizado para facilidade de uso.

Segue os princípios do "**tidyverse**" e funciona bem com o `%>%`.

As principais funções: 

- Formata perfeitamente os nomes das colunas.
- Fornece contagens rápidas de combinações de variáveis.
- Isola e apaga registros duplicados.

## Janitor – `clean_names`

Ajusta o nome das colunas com problema de formatação, espaços e caracteres inválidos.

Exemplo de colunas com problema:
```{r}
library(dplyr)
df <- tibble(caseID = 1, DOB = 2, Other = 3, "Coluna com Espaço" = 4)
names(df)
```

Utilizando a função:
```{r, echo = TRUE}
library(janitor)
clean_names(df)
```

## Janitor - `get_dupes`

Apresenta os dados duplicados:
```{r, echo=TRUE}
get_dupes(mtcars, mpg, hp)
```

## Janitor - `tabyl`

Apresenta contagens rápidas dos dados das tabelas (sendo compatível com o pipe `%>%` e outros recursos):
```{r, echo=TRUE}
mtcars %>%
  tabyl(cyl, gear) # o mesmo que tabyl(mtcars, cyl, gear)
```

## Janitor - `compare_df_cols`

Compara as colunas e apresenta as com tipos diferentes:
```{r, echo=TRUE}
df1 <- tibble(a = 1:2, b = c("pequeno", "grande"))
df2 <- tibble(a = 10:12, b = as.factor(c("médio", "pequeno", "grande")), c = 0) # no exemplo, a coluna b é um fator
df3 <- tibble(a = 3:4, b = c("médio", "grande"))

compare_df_cols(df1, df2, df3, return = "mismatch", bind_method = "rbind") # tente também "all" e "match"
```

## Janitor - `compare_df_cols_same`

Executa a mesma comparação que em `compare_df_cols`, retornando verdadeiro ou falso para a consulta:
```{r, echo=TRUE}
compare_df_cols_same(df1, df2, df3)
```

## Janitor - `remove_empty`

Remove colunas 100% vazias (`NA`).

- Caso de uso: limpeza de arquivos do Excel que contêm linhas e colunas vazias após serem lidos no R.

Tabela com valores em branco:
```{r}
df <- tibble(
  v1 = c(1, NA, 3),
  v2 = c(NA, NA, NA),
  v3 = c("a", NA, "b"),
  v4 = c("c",NA, NA),
  V5 = c(NA, NA, 4)
)
df
```

## Janitor - `remove_empty`

Exemplo do uso do remove_empty removendo colunas e linhas em branco:
```{r, echo=TRUE}
library(janitor)
df %>%
  remove_empty(c("rows", "cols"))
```

## Janitor - `remove_constant`

Remove colunas contendo dados 100% iguais:
```{r, echo=TRUE}
df <- tibble(
  id = c(1, 2, 3, 4),
  country = c("Brazil","Brazil","Brazil", "Brazil"),
  state = c("SP", "SP", "SP", "SP"),
  client_name = c("João", "Maria", "José", "Fernanda"),
  sex = c("M", "F", "M", NA)
  )
df
```

## Janitor - `remove_constant`

Exemplo do uso do `remove_constant()`:
```{r, echo=TRUE}
library(janitor)
df %>%
  remove_constant()
```

## Leitura complementar

-   [cran.r-project.org - Janitor](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)
-   [rdrr.io - Janitor](https://rdrr.io/cran/janitor/man/tabyl.html)

# Limpeza de dados no R: `Janitor` {background-color="#25325f"}